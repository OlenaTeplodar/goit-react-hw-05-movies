{"version":3,"file":"static/js/509.826a8b60.chunk.js","mappings":"4SAEaA,EAAaC,EAAAA,GAAAA,GAAH,qIAQVC,EAAaD,EAAAA,GAAAA,GAAH,qJAQVE,EAAaF,EAAAA,GAAAA,GAAH,2FAMVG,EAAgBH,EAAAA,GAAAA,GAAH,0G,SC0D1B,EAnEa,WACX,OAA4BI,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,mCAAG,oGAEvBN,GAAW,GAFY,UAGJO,EAAAA,EAAAA,IAAiBC,OAAOL,IAHpB,OAGjBM,EAHiB,OAKvBX,EAAUW,GALa,gDAOvBP,EAAS,KAAMQ,SAPQ,yBASvBV,GAAW,GATY,4EAAH,qDAYxBM,GACD,GAAE,CAACH,KAGF,4BACE,SAAC,KAAD,CACEQ,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,aAAc,CAAC,EACfC,aAAa,GACbC,QAASjB,IAAW,EACpBkB,UAAU,yBACVC,iBAAiB,UACjBC,iBAAiB,UACjBC,kBAAkB,YAEnBnB,IAAS,SAACoB,EAAA,EAAD,IACTxB,EAAOyB,OAAS,IAAMrB,IACrB,SAACV,EAAD,UACGM,EAAO0B,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACV,UAAClC,EAAD,YACE,gBACEmC,IACEF,EACI,kCAAoCA,EACpC,0FAENG,IAAKJ,EACLb,MAAO,IACPD,OAAQ,OAEV,SAACjB,EAAD,UAAa+B,KACb,uCAAeE,OAZAH,EADP,MAkBG,IAAlB3B,EAAOyB,SAAiBrB,IACvB,SAACN,EAAD,4EAMP,C,sEC9EYmC,E,QAAYtC,GAAAA,EAAH,8D,SCQtB,EARc,WACZ,OACE,SAACsC,EAAD,8EAIH,C,yLCJKC,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QALQ,mCAMRC,SAAU,WAIDC,EAAiB,mCAAG,sGACRN,EAASO,IAAI,8BADL,uBACvB7B,EADuB,EACvBA,KADuB,kBAExBA,EAAK8B,SAFmB,2CAAH,qDAKjBC,EAAe,mCAAG,WAAMC,GAAN,yFACNV,EAASO,IAAT,8BACEG,EADF,gCADM,uBACrBhC,EADqB,EACrBA,KADqB,kBAItBA,EAAK8B,SAJiB,2CAAH,sDAOfG,EAAgB,mCAAG,WAAMlB,GAAN,yFACPO,EAASO,IAAT,iBAAuBd,IADhB,uBACtBf,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAH,sDAKhBF,EAAgB,mCAAG,WAAMiB,GAAN,yFACPO,EAASO,IAAT,iBAAuBd,EAAvB,aADO,uBACtBf,EADsB,EACtBA,KADsB,kBAEvBA,EAAKkC,MAFkB,2CAAH,sDAKhBC,EAAgB,mCAAG,WAAMpB,GAAN,yFACPO,EAASO,IAAT,iBAAuBd,EAAvB,oBADO,uBACtBf,EADsB,EACtBA,KADsB,kBAEvBA,EAAK8B,SAFkB,2CAAH,qD","sources":["components/Cast/cast.styled.js","components/Cast/Cast.jsx","components/Error/error.styled.js","components/Error/Error.jsx","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ActorsList = styled.ul`\n  margin-right: 32px;\n  display: flex;\n  justify-content: space-around;\n  gap: 16px;\n  flex-wrap: wrap;\n`;\n\nexport const ActorsItem = styled.li`\n  text-align: center;\n  padding: 4px;\n  width: 140px;\n  list-style: none;\n  box-shadow: 0 5px 5px 0 rgba(0, 0, 0, 0.4);\n`;\n\nexport const ActorsName = styled.h3`\n  text-align: center;\n  font-weight: 500;\n  margin-bottom: 4px;\n`;\n\nexport const ActorsMassage = styled.h4`\n  color: tomato;\n  font-weight: 500;\n  margin-top: 50px;\n  margin-left: 50px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { ThreeCircles } from 'react-loader-spinner';\n\nimport Error from 'components/Error/Error';\nimport { getMoviesCasting } from 'services/moviesApi';\n\nimport {\n  ActorsItem,\n  ActorsList,\n  ActorsMassage,\n  ActorsName,\n} from './cast.styled';\n\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMoviesDetails = async () => {\n      try {\n        setLoading(true);\n        const data = await getMoviesCasting(Number(movieId));\n\n        setActors(data);\n      } catch (error) {\n        setError(error.massage);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMoviesDetails();\n  }, [movieId]);\n\n  return (\n    <div>\n      <ThreeCircles\n        height=\"100\"\n        width=\"100\"\n        color=\"#2642dd\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={loading && true}\n        ariaLabel=\"three-circles-rotating\"\n        outerCircleColor=\"#6478eb\"\n        innerCircleColor=\"#424f99\"\n        middleCircleColor=\"#031992\"\n      />\n      {error && <Error />}\n      {actors.length > 0 && !error && (\n        <ActorsList>\n          {actors.map(({ id, name, profile_path, character }) => (\n            <ActorsItem key={id}>\n              <img\n                src={\n                  profile_path\n                    ? 'https://image.tmdb.org/t/p/w500' + profile_path\n                    : 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png'\n                }\n                alt={name}\n                width={120}\n                height={148}\n              />\n              <ActorsName>{name}</ActorsName>\n              <p>Character: {character}</p>\n            </ActorsItem>\n          ))}\n        </ActorsList>\n      )}\n      {actors.length === 0 && !error && (\n        <ActorsMassage>\n          Information about the actors of this film is not available.\n        </ActorsMassage>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const ErrorText = styled.p`\n  color: tomato;\n  font-size: 24px;\n`;\n","import { ErrorText } from './error.styled';\n\nconst Error = () => {\n  return (\n    <ErrorText>\n      Oops...Something went wrong, reload the page or try again later!\n    </ErrorText>\n  );\n};\n\nexport default Error;\n","import axios from 'axios';\n\nconst KEY = '2e28e0889deced997fe5d570fd3e41df';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: KEY,\n    language: 'en-us',\n  },\n});\n\nexport const getMoviesTrending = async () => {\n  const { data } = await instance.get('/trending/movie/day?page=1');\n  return data.results;\n};\n\nexport const getMoviesSearch = async query => {\n  const { data } = await instance.get(\n    `/search/movie?query=${query}&page=1&include_adult=false`\n  );\n  return data.results;\n};\n\nexport const getMoviesDetails = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMoviesCasting = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const getMoviesReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews?page=1`);\n  return data.results;\n};\n\n// https://api.themoviedb.org/3/movie/550?api_key=2e28e0889deced997fe5d570fd3e41df\n"],"names":["ActorsList","styled","ActorsItem","ActorsName","ActorsMassage","useState","actors","setActors","loading","setLoading","error","setError","movieId","useParams","useEffect","fetchMoviesDetails","getMoviesCasting","Number","data","massage","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","Error","length","map","id","name","profile_path","character","src","alt","ErrorText","instance","axios","baseURL","params","api_key","language","getMoviesTrending","get","results","getMoviesSearch","query","getMoviesDetails","cast","getMoviesReviews"],"sourceRoot":""}